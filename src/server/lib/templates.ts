/**
 * Default NC File Templates
 */

export interface NCTemplate {
  name: string;
  description: string;
  header: string;
  footer: string;
}

export const defaultTemplates: NCTemplate[] = [
  {
    name: 'basic',
    description: 'Basic template with minimal header/footer',
    header: '%\n(Program generated by NC File Merger)',
    footer: 'M30\n%'
  },
  {
    name: 'fanuc',
    description: 'Fanuc-style template',
    header: `%
O0001
(MERGED PROGRAM)
(GENERATED BY NC FILE MERGER)
G21 (Metric)
G90 (Absolute positioning)
G17 (XY plane)
G40 G49 G80 (Cancel comp, offsets, cycles)`,
    footer: `M30
%`
  },
  {
    name: 'detailed',
    description: 'Detailed template with initialization',
    header: `%
(====================================)
(NC FILE MERGER - MERGED OUTPUT)
(====================================)
(DATE: ${new Date().toISOString()})
(====================================)
G21 (Metric)
G90 (Absolute)
G17 (XY Plane)
G40 (Cancel cutter comp)
G49 (Cancel tool length offset)
G80 (Cancel canned cycles)
G54 (Work coordinate system 1)`,
    footer: `(====================================)
(PROGRAM END)
(====================================)
G00 Z100.0 (Retract)
M30
%`
  },
  {
    name: 'minimal',
    description: 'Minimal template with no extra formatting',
    header: '',
    footer: 'M30'
  }
];

export class TemplateManager {
  private templates: Map<string, NCTemplate>;

  constructor() {
    this.templates = new Map();
    defaultTemplates.forEach(template => {
      this.templates.set(template.name, template);
    });
  }

  /**
   * Get a template by name
   */
  getTemplate(name: string): NCTemplate | undefined {
    return this.templates.get(name);
  }

  /**
   * Get all available templates
   */
  getAllTemplates(): NCTemplate[] {
    return Array.from(this.templates.values());
  }

  /**
   * Add a custom template
   */
  addTemplate(template: NCTemplate): void {
    this.templates.set(template.name, template);
  }

  /**
   * Create a custom template from user input
   */
  createCustomTemplate(
    name: string,
    description: string,
    header: string,
    footer: string
  ): NCTemplate {
    const template: NCTemplate = {
      name,
      description,
      header,
      footer
    };

    this.addTemplate(template);
    return template;
  }

  /**
   * Get template as merge options
   */
  getTemplateForMerge(name: string): { header: string; footer: string } | undefined {
    const template = this.templates.get(name);
    if (!template) return undefined;

    return {
      header: template.header,
      footer: template.footer
    };
  }
}
